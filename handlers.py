import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler, CommandHandler
from telegram.error import TimedOut, NetworkError

from queue_manager import queue_manager
from keyboards import get_main_keyboard, get_swap_confirmation_keyboard, get_swap_users_keyboard

logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        if update.message and update.message.is_topic_message:
            topic_id = update.message.message_thread_id
            sent_message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=f"–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é –≤ —ç—Ç–æ–º —Ç–æ–ø–∏–∫–µ!\n\n"
                     f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥—å—é.",
                reply_markup=get_main_keyboard(),
                message_thread_id=topic_id
            )
            queue_manager.set_queue_message_id(topic_id, sent_message.message_id)
    except (TimedOut, NetworkError) as e:
        logger.warning(f"Timeout in start command: {e}")
    except Exception as e:
        logger.error(f"Error in start command: {e}")

async def init_queue_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—á–µ—Ä–µ–¥—å—é –≤ –Ω–æ–≤–æ–º —Ç–æ–ø–∏–∫–µ"""
    try:
        if update.message and update.message.is_topic_message:
            topic_id = update.message.message_thread_id
            sent_message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text=queue_manager.get_queue_text(topic_id),
                reply_markup=get_main_keyboard(),
                message_thread_id=topic_id
            )
            queue_manager.set_queue_message_id(topic_id, sent_message.message_id)
    except (TimedOut, NetworkError) as e:
        logger.warning(f"Timeout in init command: {e}")
    except Exception as e:
        logger.error(f"Error in init command: {e}")

async def backup_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    try:
        queue_manager.save_data()
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text="‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Ä—É—á–Ω—É—é",
            message_thread_id=update.message.message_thread_id
        )
    except Exception as e:
        logger.error(f"Error in backup command: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —Ç–∞–π–º–∞—É—Ç
        await query.answer()
    except (TimedOut, NetworkError) as e:
        logger.warning(f"Timeout answering callback: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ—à–µ–ª
    except Exception as e:
        logger.error(f"Error answering callback: {e}")
    
    user_id = query.from_user.id
    topic_id = query.message.message_thread_id
    chat_id = query.message.chat_id
    
    logger.info(f"Callback: {query.data} from user {user_id}")
    
    try:
        if query.data == "add_to_queue":
            await add_to_queue_handler(query, topic_id, user_id, context)
        
        elif query.data == "remove_from_queue":
            await remove_from_queue_handler(query, topic_id, user_id, context)
        
        elif query.data == "start_swap":
            await start_swap_handler(query, topic_id, user_id, chat_id, context)
        
        elif query.data.startswith("swap_with_"):
            target_user_id = int(query.data.split("_")[2])
            await create_swap_proposal(query, topic_id, user_id, target_user_id, chat_id)
        
        elif query.data.startswith("swap_confirm_"):
            swap_id = query.data.split("_", 2)[2]
            await confirm_swap(query, swap_id, chat_id, context)
        
        elif query.data.startswith("swap_cancel_"):
            swap_id = query.data.split("_", 2)[2]
            await cancel_swap(query, swap_id, chat_id, context)
        
        elif query.data == "back_to_main":
            await back_to_main_handler(query, topic_id, context)
    
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        try:
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", show_alert=True)
        except:
            pass

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
async def add_to_queue_handler(query, topic_id, user_id, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å"""
    try:
        user = query.from_user
        success = queue_manager.add_user_to_queue(
            topic_id, user_id, user.first_name, user.last_name, user.username
        )
        
        if success:
            main_message_id = queue_manager.get_queue_message_id(topic_id)
            if main_message_id:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=main_message_id,
                    text=queue_manager.get_queue_text(topic_id),
                    reply_markup=get_main_keyboard()
                )
        else:
            await query.answer("–í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in add_to_queue: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –æ—á–µ—Ä–µ–¥—å", show_alert=True)

async def remove_from_queue_handler(query, topic_id, user_id, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
    try:
        success = queue_manager.remove_user_from_queue(topic_id, user_id)
        
        if success:
            main_message_id = queue_manager.get_queue_message_id(topic_id)
            if main_message_id:
                await context.bot.edit_message_text(
                    chat_id=query.message.chat_id,
                    message_id=main_message_id,
                    text=queue_manager.get_queue_text(topic_id),
                    reply_markup=get_main_keyboard()
                )
        else:
            await query.answer("–í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏!", show_alert=True)
    except Exception as e:
        logger.error(f"Error in remove_from_queue: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", show_alert=True)

async def start_swap_handler(query, topic_id, user_id, chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞ - –ø–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        queue = queue_manager.queues[topic_id]
        if len(queue) < 2:
            await query.answer("–í –æ—á–µ—Ä–µ–¥–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 2 —á–µ–ª–æ–≤–µ–∫–∞ –¥–ª—è –æ–±–º–µ–Ω–∞!", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏:",
            reply_markup=get_swap_users_keyboard(queue, user_id),
            message_thread_id=topic_id
        )
    except Exception as e:
        logger.error(f"Error in start_swap: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –æ–±–º–µ–Ω–∞", show_alert=True)

async def create_swap_proposal(query, topic_id, user1_id, user2_id, chat_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–± –æ–±–º–µ–Ω–µ"""
    try:
        queue = queue_manager.queues[topic_id]
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        user1_data = next((u for u in queue if u['user_id'] == user1_id), None)
        user2_data = next((u for u in queue if u['user_id'] == user2_id), None)
        
        if not user1_data or not user2_data:
            await query.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –æ–±–º–µ–Ω–∞
        swap_id = f"{chat_id}_{topic_id}_{user1_id}_{user2_id}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–µ
        swap_data = {
            'topic_id': topic_id,
            'user1_id': user1_id,
            'user2_id': user2_id,
            'user1_name': user1_data['display_name'],
            'user2_name': user2_data['display_name'],
            'chat_id': chat_id,
            'proposal_message_id': query.message.message_id
        }
        
        queue_manager.add_pending_swap(swap_id, swap_data)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞
        await query.edit_message_text(
            f"üîÑ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ\n\n"
            f"{user1_data['display_name']} —Ö–æ—á–µ—Ç –ø–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏ —Å {user2_data['display_name']}\n\n"
            f"{user2_data['display_name']}, –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –Ω–∞ –æ–±–º–µ–Ω?",
            reply_markup=get_swap_confirmation_keyboard(swap_id)
        )
        
    except Exception as e:
        logger.error(f"Error in create_swap_proposal: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±–º–µ–Ω–∞", show_alert=True)

async def confirm_swap(query, swap_id, chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞"""
    try:
        swap_id = query.data.split("_", 2)[2]
        swap_data = queue_manager.get_pending_swap(swap_id)
        if not swap_data:
            await query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if query.from_user.id != swap_data['user2_id']:
            await query.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–º–µ–Ω
        success = queue_manager.swap_users(
            swap_data['topic_id'], swap_data['user1_id'], swap_data['user2_id']
        )
        
        if success:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–±–º–µ–Ω–µ
            try:
                await context.bot.delete_message(
                    chat_id=chat_id,
                    message_id=swap_data['proposal_message_id']
                )
            except Exception as e:
                logger.error(f"Error deleting proposal message: {e}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—á–µ—Ä–µ–¥—å—é
            main_message_id = queue_manager.get_queue_message_id(swap_data['topic_id'])
            if main_message_id:
                await context.bot.edit_message_text(
                    chat_id=chat_id,
                    message_id=main_message_id,
                    text=queue_manager.get_queue_text(swap_data['topic_id']),
                    reply_markup=get_main_keyboard()
                )
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ", show_alert=True)
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–µ
        queue_manager.remove_pending_swap(swap_id)
    
    except Exception as e:
        logger.error(f"Error in confirm_swap: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ–±–º–µ–Ω–∞", show_alert=True)

async def cancel_swap(query, swap_id, chat_id, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –æ–±–º–µ–Ω–∞"""
    try:
        swap_id = query.data.split("_", 2)[2]
        swap_data = queue_manager.get_pending_swap(swap_id)
        if not swap_data:
            await query.answer("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–± –æ–±–º–µ–Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if query.from_user.id != swap_data['user2_id']:
            await query.answer("–≠—Ç–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –Ω–µ –¥–ª—è –≤–∞—Å!", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ–± –æ–±–º–µ–Ω–µ
        try:
            await context.bot.delete_message(
                chat_id=chat_id,
                message_id=swap_data['proposal_message_id']
            )
        except Exception as e:
            logger.error(f"Error deleting proposal message: {e}")
        
        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±–º–µ–Ω–µ
        queue_manager.remove_pending_swap(swap_id)
    
    except Exception as e:
        logger.error(f"Error in cancel_swap: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞", show_alert=True)

async def back_to_main_handler(query, topic_id, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
        await context.bot.delete_message(
            chat_id=query.message.chat_id,
            message_id=query.message.message_id
        )
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        main_message_id = queue_manager.get_queue_message_id(topic_id)
        if main_message_id:
            await context.bot.edit_message_text(
                chat_id=query.message.chat_id,
                message_id=main_message_id,
                text=queue_manager.get_queue_text(topic_id),
                reply_markup=get_main_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in back_to_main: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é", show_alert=True)