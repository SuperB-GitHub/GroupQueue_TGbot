from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from queue_manager import queue_manager


def get_main_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å—Å—è –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="add_to_queue")],
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å", callback_data="start_add_user")],
        [InlineKeyboardButton("‚ûñ –í—ã–π—Ç–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏", callback_data="remove_from_queue")],
        [InlineKeyboardButton("üîÑ –ü–æ–º–µ–Ω—è—Ç—å—Å—è –º–µ—Å—Ç–∞–º–∏", callback_data="start_swap")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_swap_confirmation_keyboard(swap_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–º–µ–Ω–∞"""
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"swap_confirm_{swap_id}")],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"swap_cancel_{swap_id}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"swap_back_{swap_id}")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_swap_users_keyboard(queue, current_user_id, initiator_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–±–º–µ–Ω–∞"""
    keyboard = []
    for user in queue:
        if user['user_id'] != current_user_id:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
            button_text = user['display_name']
            if user['username']:
                button_text += f" (@{user['username']})"

            # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∏–º–µ–Ω–∞
            if len(button_text) > 50:
                button_text = button_text[:47] + "..."

            keyboard.append([InlineKeyboardButton(
                button_text,
                callback_data=f"swap_with_{user['user_id']}_{initiator_id}"
            )])

    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)


def get_add_users_keyboard(chat_id, topic_id, page=0):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ 5"""
    users = queue_manager.get_known_users(chat_id)
    if not users:
        return InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]])

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ display_name –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    users = sorted(users, key=lambda u: u['display_name'])

    page_size = 5
    total_pages = (len(users) + page_size - 1) // page_size
    start = page * page_size
    end = start + page_size
    page_users = users[start:end]

    keyboard = []
    for user in page_users:
        button_text = user['display_name']
        if user['username']:
            button_text += f" (@{user['username']})"
        if len(button_text) > 50:
            button_text = button_text[:47] + "..."
        keyboard.append([InlineKeyboardButton(
            button_text,
            callback_data=f"add_user_{user['user_id']}_{topic_id}"
        )])

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_row = []
    if page > 0:
        nav_row.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"add_page_{page-1}_{topic_id}"))
    nav_row.append(InlineKeyboardButton(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}", callback_data="noop"))
    if page < total_pages - 1:
        nav_row.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", callback_data=f"add_page_{page+1}_{topic_id}"))
    if nav_row:
        keyboard.append(nav_row)

    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])

    return InlineKeyboardMarkup(keyboard)